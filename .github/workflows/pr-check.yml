name: PR Quality Check

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ main ]

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.changes.outputs.frontend }}
      backend: ${{ steps.changes.outputs.backend }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Check for changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            frontend:
              - 'frontend/**'
            backend:
              - 'backend/**'

  frontend-check:
    name: Frontend Quality Check
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.frontend == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Run ESLint
        working-directory: frontend
        run: npm run lint

      - name: Check Prettier formatting
        working-directory: frontend
        run: npm run format:check

      - name: Run tests
        working-directory: frontend
        run: npm run test

      - name: Build project
        working-directory: frontend
        run: npm run build

  backend-check:
    name: Backend Quality Check
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.backend == 'true'
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: md_blog_test
          MYSQL_USER: user
          MYSQL_PASSWORD: password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, dom, filter, gd, iconv, json, mbstring, pdo
          coverage: none

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: backend/vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('backend/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        working-directory: backend
        run: composer install --no-interaction --prefer-dist --optimize-autoloader

      - name: Create environment file
        working-directory: backend
        run: |
          cp .env.example .env
          sed -i 's/DB_CONNECTION=sqlite/DB_CONNECTION=mysql/' .env
          sed -i 's/# DB_HOST=127.0.0.1/DB_HOST=127.0.0.1/' .env
          sed -i 's/# DB_PORT=3306/DB_PORT=3306/' .env
          sed -i 's/# DB_DATABASE=laravel/DB_DATABASE=md_blog_test/' .env
          sed -i 's/# DB_USERNAME=root/DB_USERNAME=user/' .env
          sed -i 's/# DB_PASSWORD=/DB_PASSWORD=password/' .env

      - name: Generate application key
        working-directory: backend
        run: php artisan key:generate

      - name: Run database migrations
        working-directory: backend
        run: php artisan migrate --force

      - name: Check Laravel Pint formatting
        working-directory: backend
        run: ./vendor/bin/pint --test

      - name: Run tests
        working-directory: backend
        run: php artisan test

  security-check:
    name: Security Check
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'