name: CI/CD Pipeline

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'frontend/**'
      - 'backend/**'
      - 'docker-compose.yml'
      - '.github/workflows/**'
  push:
    branches: [ 'feature/**' ]
    paths:
      - 'frontend/**'
      - 'backend/**'
      - 'docker-compose.yml'
      - '.github/workflows/**'

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  frontend:
    name: Frontend CI (ESLint, Prettier, Tests)
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-frontend-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-frontend-

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Build frontend Docker image
        run: |
          docker-compose build frontend
        env:
          BUILDX_CACHE_FROM: type=local,src=/tmp/.buildx-cache
          BUILDX_CACHE_TO: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Start services
        run: |
          docker-compose up -d frontend
          sleep 10

      - name: Install dependencies
        run: |
          docker-compose exec -T frontend npm ci

      - name: Run ESLint
        run: |
          docker-compose exec -T frontend npm run lint

      - name: Run Prettier (check)
        run: |
          docker-compose exec -T frontend npm run format:check || echo "NEEDS_FORMAT=true" >> $GITHUB_ENV

      - name: Run Prettier (format)
        if: env.NEEDS_FORMAT == 'true'
        run: |
          docker-compose exec -T frontend npm run format

      - name: Run tests
        run: |
          docker-compose exec -T frontend npm run test

      - name: Commit formatted files
        if: env.NEEDS_FORMAT == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add frontend/
          git diff --staged --quiet || git commit -m "style: auto-format frontend code

          ðŸ¤– Generated with [Claude Code](https://claude.ai/code)

          Co-Authored-By: Claude <noreply@anthropic.com>"

      - name: Push changes
        if: env.NEEDS_FORMAT == 'true'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.head_ref }}

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  backend:
    name: Backend CI (Laravel Pint, Tests)
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: md_blog_test
          MYSQL_USER: user
          MYSQL_PASSWORD: password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-backend-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-backend-

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: backend/vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('backend/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Create environment file
        run: |
          cp backend/.env.example backend/.env
          sed -i 's/DB_CONNECTION=sqlite/DB_CONNECTION=mysql/' backend/.env
          sed -i 's/# DB_HOST=127.0.0.1/DB_HOST=127.0.0.1/' backend/.env
          sed -i 's/# DB_PORT=3306/DB_PORT=3306/' backend/.env
          sed -i 's/# DB_DATABASE=laravel/DB_DATABASE=md_blog_test/' backend/.env
          sed -i 's/# DB_USERNAME=root/DB_USERNAME=user/' backend/.env
          sed -i 's/# DB_PASSWORD=/DB_PASSWORD=password/' backend/.env

      - name: Build backend Docker image
        run: |
          docker-compose build backend
        env:
          BUILDX_CACHE_FROM: type=local,src=/tmp/.buildx-cache
          BUILDX_CACHE_TO: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Start backend service
        run: |
          docker-compose up -d backend
          sleep 15

      - name: Install dependencies
        run: |
          docker-compose exec -T backend composer install --no-interaction --prefer-dist

      - name: Generate application key
        run: |
          docker-compose exec -T backend php artisan key:generate

      - name: Run database migrations
        run: |
          docker-compose exec -T backend php artisan migrate --force
        env:
          DB_HOST: 127.0.0.1
          DB_DATABASE: md_blog_test
          DB_USERNAME: user
          DB_PASSWORD: password

      - name: Run Laravel Pint (check)
        run: |
          docker-compose exec -T backend ./vendor/bin/pint --test || echo "NEEDS_FORMAT=true" >> $GITHUB_ENV

      - name: Run Laravel Pint (format)
        if: env.NEEDS_FORMAT == 'true'
        run: |
          docker-compose exec -T backend ./vendor/bin/pint

      - name: Run tests
        run: |
          docker-compose exec -T backend php artisan test
        env:
          DB_HOST: 127.0.0.1
          DB_DATABASE: md_blog_test
          DB_USERNAME: user
          DB_PASSWORD: password

      - name: Commit formatted files
        if: env.NEEDS_FORMAT == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add backend/
          git diff --staged --quiet || git commit -m "style: auto-format backend code

          ðŸ¤– Generated with [Claude Code](https://claude.ai/code)

          Co-Authored-By: Claude <noreply@anthropic.com>"

      - name: Push changes
        if: env.NEEDS_FORMAT == 'true'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.head_ref }}

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [frontend, backend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-integration-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-integration-

      - name: Create environment file
        run: |
          cp backend/.env.example backend/.env

      - name: Start all services
        run: |
          docker-compose up -d
          sleep 30

      - name: Wait for services to be ready
        run: |
          timeout 60 bash -c 'until curl -f http://localhost/; do sleep 2; done'
          timeout 60 bash -c 'until curl -f http://localhost:8000/; do sleep 2; done'

      - name: Run integration tests
        run: |
          echo "Integration tests would run here"
          # Add actual integration tests when frontend is more developed

      - name: Cleanup
        if: always()
        run: |
          docker-compose down -v