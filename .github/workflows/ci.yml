name: CI/CD Pipeline

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'frontend/**'
      - 'backend/**'
      - 'docker-compose.yml'
      - '.github/workflows/**'
  push:
    branches: [ 'feature/**' ]
    paths:
      - 'frontend/**'
      - 'backend/**'
      - 'docker-compose.yml'
      - '.github/workflows/**'

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  frontend:
    name: Frontend CI (ESLint, Prettier, Tests)
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Run ESLint
        working-directory: frontend
        run: npm run lint

      - name: Run Prettier (check)
        working-directory: frontend
        run: npm run format:check || echo "NEEDS_FORMAT=true" >> $GITHUB_ENV

      - name: Run Prettier (format)
        if: env.NEEDS_FORMAT == 'true'
        working-directory: frontend
        run: npm run format

      - name: Run tests
        working-directory: frontend
        run: npm run test

      - name: Build project
        working-directory: frontend
        run: npm run build

      - name: Commit formatted files
        if: env.NEEDS_FORMAT == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add frontend/
          git diff --staged --quiet || git commit -m "style: auto-format frontend code

          ü§ñ Generated with [Claude Code](https://claude.ai/code)

          Co-Authored-By: Claude <noreply@anthropic.com>"

      - name: Push changes
        if: env.NEEDS_FORMAT == 'true'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.head_ref }}

  backend:
    name: Backend CI (Laravel Pint, Tests)
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: md_blog_test
          MYSQL_USER: user
          MYSQL_PASSWORD: password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, dom, filter, gd, iconv, json, mbstring, pdo
          coverage: none

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: backend/vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('backend/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        working-directory: backend
        run: composer install --no-interaction --prefer-dist --optimize-autoloader

      - name: Create environment file
        working-directory: backend
        run: |
          APP_KEY="base64:$(openssl rand -base64 32)"
          cat > .env << EOF
          APP_NAME=Laravel
          APP_ENV=testing
          APP_KEY=${APP_KEY}
          APP_DEBUG=true
          APP_TIMEZONE=Asia/Tokyo
          APP_URL=http://localhost
          
          APP_LOCALE=ja
          APP_FALLBACK_LOCALE=en
          APP_FAKER_LOCALE=ja_JP
          
          BCRYPT_ROUNDS=4
          
          LOG_CHANNEL=stack
          LOG_STACK=single
          LOG_LEVEL=debug
          
          DB_CONNECTION=mysql
          DB_HOST=127.0.0.1
          DB_PORT=3306
          DB_DATABASE=md_blog_test
          DB_USERNAME=user
          DB_PASSWORD=password
          
          SESSION_DRIVER=array
          SESSION_LIFETIME=120
          
          BROADCAST_CONNECTION=log
          FILESYSTEM_DISK=local
          QUEUE_CONNECTION=sync
          
          CACHE_STORE=array
          
          MAIL_MAILER=array
          EOF

      - name: Verify application key
        working-directory: backend
        run: |
          echo "Generated .env file:"
          cat .env
          echo "Testing key format:"
          php artisan tinker --execute="echo 'Key length: ' . strlen(base64_decode(substr(config('app.key'), 7))) . ' bytes';"

      - name: Run database migrations
        working-directory: backend
        run: php artisan migrate --force

      - name: Run Laravel Pint (check)
        working-directory: backend
        run: ./vendor/bin/pint --test || echo "NEEDS_FORMAT=true" >> $GITHUB_ENV

      - name: Run Laravel Pint (format)
        if: env.NEEDS_FORMAT == 'true'
        working-directory: backend
        run: ./vendor/bin/pint

      - name: Run tests
        working-directory: backend
        run: php artisan test

      - name: Commit formatted files
        if: env.NEEDS_FORMAT == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add backend/
          git diff --staged --quiet || git commit -m "style: auto-format backend code

          ü§ñ Generated with [Claude Code](https://claude.ai/code)

          Co-Authored-By: Claude <noreply@anthropic.com>"

      - name: Push changes
        if: env.NEEDS_FORMAT == 'true'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.head_ref }}

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [frontend, backend]
    if: always()
    
    steps:
      - name: Summary
        run: |
          echo "Frontend CI: ${{ needs.frontend.result }}"
          echo "Backend CI: ${{ needs.backend.result }}"
          
          if [[ "${{ needs.frontend.result }}" == "failure" || "${{ needs.backend.result }}" == "failure" ]]; then
            echo "‚ùå CI checks failed"
            exit 1
          else
            echo "‚úÖ All CI checks passed"
          fi